/*
 * FIT_M24C08_EE.h
 *
 *  Created on: May 19, 2025
 *      Author: fit0354
 */

#ifndef SRC_FIT_HEADER_FIT_M24C08_EE_H_
#define SRC_FIT_HEADER_FIT_M24C08_EE_H_


#define WC_Pin LL_GPIO_PIN_3
#define WC_GPIO_Port GPIOB

#define EE_BASE_SLAVE_ADDR 0xA0

#define INFOR_ID_CARTRIDGE1 0x00
#define INFOR_ID_CARTRIDGE2 0x01
#define INFOR_ID_SYSTEM     0x02


#define PAGE0_START_ADDR   0
#define PAGE0_SIZE 128
#define PAGE0_CHECKSUM_ADDR         PAGE0_START_ADDR+PAGE0_SIZE-1
#define DEBUG_MSG_ENABLE_FLAG_ADDR  PAGE0_CHECKSUM_ADDR-1

#define PAGE2_START_ADDR   PAGE0_START_ADDR+PAGE0_SIZE
#define PAGE2_SIZE 128
#define PAGE2_CHECKSUM_ADDR PAGE2_START_ADDR+PAGE2_SIZE-1

#define PAGE3_START_ADDR   PAGE2_START_ADDR+PAGE2_SIZE
#define PAGE3_SIZE 128
#define PAGE3_CHECKSUM_ADDR PAGE3_START_ADDR+PAGE3_SIZE-1

#define PAGE4_START_ADDR   PAGE3_START_ADDR+PAGE3_SIZE
#define PAGE4_SIZE 128
#define PAGE4_CHECKSUM_ADDR PAGE4_START_ADDR+PAGE4_SIZE-1

#define TBD1_START_ADDR   PAGE4_START_ADDR+PAGE4_SIZE
#define TBD1_SIZE 128
#define TBD1_CHECKSUM_ADDR TBD1_START_ADDR+TBD1_SIZE-1

#define TBD2_START_ADDR   TBD1_START_ADDR+TBD1_SIZE
#define TBD2_SIZE 128
#define TBD2_CHECKSUM_ADDR TBD2_START_ADDR+TBD2_SIZE-1

#define INFO1_START_ADDR   TBD2_START_ADDR+TBD2_SIZE
#define INFO1_SIZE 128
#define INFO1_CHECKSUM_ADDR INFO1_START_ADDR+INFO1_SIZE-1

#define CARTRIDGE1_MODE_NUMBER_ADDR INFO1_START_ADDR
#define CARTRIDGE1_MODE_NUMBER_SIZE 8

#define CARTRIDGE1_VERSION_LETTER_ADDR CARTRIDGE1_MODE_NUMBER_ADDR+CARTRIDGE1_MODE_NUMBER_SIZE
#define CARTRIDGE1_VERSION_LETTER_SIZE 1

#define CARTRIDGE1_SERIAL_NUMBER_ADDR CARTRIDGE1_VERSION_LETTER_ADDR+CARTRIDGE1_VERSION_LETTER_SIZE
#define CARTRIDGE1_SERIAL_NUMBER_SIZE 16

#define CARTRIDGE1_SENSITIVITY_ADDR CARTRIDGE1_SERIAL_NUMBER_ADDR+CARTRIDGE1_SERIAL_NUMBER_SIZE
#define CARTRIDGE1_SENSITIVITY_SIZE 4

#define CARTRIDGE1_REFERENCE_FREQUENCY_ADDR CARTRIDGE1_SENSITIVITY_ADDR+CARTRIDGE1_SENSITIVITY_SIZE
#define CARTRIDGE1_REFERENCE_FREQUENCY_SIZE 4

#define CARTRIDGE1_UNITS_CODE_ADDR CARTRIDGE1_REFERENCE_FREQUENCY_ADDR+CARTRIDGE1_REFERENCE_FREQUENCY_SIZE
#define CARTRIDGE1_UNITS_CODE_SIZE 1

#define CARTRIDGE1_FREQUENCY_RANG_MIN_ADDR CARTRIDGE1_UNITS_CODE_ADDR+CARTRIDGE1_UNITS_CODE_SIZE
#define CARTRIDGE1_FREQUENCY_RANG_MIN_SIZE 2

#define CARTRIDGE1_FREQUENCY_RANG_MAX_ADDR CARTRIDGE1_FREQUENCY_RANG_MIN_ADDR+CARTRIDGE1_FREQUENCY_RANG_MIN_SIZE
#define CARTRIDGE1_FREQUENCY_RANG_MAX_SIZE 2

#define CARTRIDGE1_CHANNEL_ASSIGNMEN_ADDR CARTRIDGE1_FREQUENCY_RANG_MAX_ADDR+CARTRIDGE1_FREQUENCY_RANG_MAX_SIZE
#define CARTRIDGE1_CHANNEL_ASSIGNMEN_SIZE 1

#define CARTRIDGE2_MODE_NUMBER_ADDR CARTRIDGE1_CHANNEL_ASSIGNMEN_ADDR+CARTRIDGE1_CHANNEL_ASSIGNMEN_SIZE
#define CARTRIDGE2_MODE_NUMBER_SIZE 8

#define CARTRIDGE2_VERSION_LETTER_ADDR CARTRIDGE2_MODE_NUMBER_ADDR+CARTRIDGE2_MODE_NUMBER_SIZE
#define CARTRIDGE2_VERSION_LETTER_SIZE 1

#define CARTRIDGE2_SERIAL_NUMBER_ADDR CARTRIDGE2_VERSION_LETTER_ADDR+CARTRIDGE2_VERSION_LETTER_SIZE
#define CARTRIDGE2_SERIAL_NUMBER_SIZE 16

#define CARTRIDGE2_SENSITIVITY_ADDR CARTRIDGE2_SERIAL_NUMBER_ADDR+CARTRIDGE2_SERIAL_NUMBER_SIZE
#define CARTRIDGE2_SENSITIVITY_SIZE 4

#define CARTRIDGE2_REFERENCE_FREQUENCY_ADDR CARTRIDGE2_SENSITIVITY_ADDR+CARTRIDGE2_SENSITIVITY_SIZE
#define CARTRIDGE2_REFERENCE_FREQUENCY_SIZE 4

#define CARTRIDGE2_UNITS_CODE_ADDR CARTRIDGE2_REFERENCE_FREQUENCY_ADDR+CARTRIDGE2_REFERENCE_FREQUENCY_SIZE
#define CARTRIDGE2_UNITS_CODE_SIZE 1

#define CARTRIDGE2_FREQUENCY_RANG_MIN_ADDR CARTRIDGE2_UNITS_CODE_ADDR+CARTRIDGE2_UNITS_CODE_SIZE
#define CARTRIDGE2_FREQUENCY_RANG_MIN_SIZE 2

#define CARTRIDGE2_FREQUENCY_RANG_MAX_ADDR CARTRIDGE2_FREQUENCY_RANG_MIN_ADDR+CARTRIDGE2_FREQUENCY_RANG_MIN_SIZE
#define CARTRIDGE2_FREQUENCY_RANG_MAX_SIZE 2

#define CARTRIDGE2_CHANNEL_ASSIGNMEN_ADDR CARTRIDGE2_FREQUENCY_RANG_MAX_ADDR+CARTRIDGE2_FREQUENCY_RANG_MAX_SIZE
#define CARTRIDGE2_CHANNEL_ASSIGNMEN_SIZE 1

#define SYSTEM_DIGITAL_INTERFACE_TYPE_ADDR CARTRIDGE2_CHANNEL_ASSIGNMEN_ADDR+CARTRIDGE2_CHANNEL_ASSIGNMEN_SIZE
#define SYSTEM_DIGITAL_INTERFACE_TYPE_SIZE 4

#define SYSTEM_BIT_CLOCK_FREQUENCY_ADDR SYSTEM_DIGITAL_INTERFACE_TYPE_ADDR+SYSTEM_DIGITAL_INTERFACE_TYPE_SIZE
#define SYSTEM_BIT_CLOCK_FREQUENCY_SIZE 4

#define SYSTEM_WORD_LENGTH_ADDR SYSTEM_BIT_CLOCK_FREQUENCY_ADDR+SYSTEM_BIT_CLOCK_FREQUENCY_SIZE
#define SYSTEM_WORD_LENGTH_SIZE 1

#define SYSTEM_SAMPLE_RATE_ADDR SYSTEM_WORD_LENGTH_ADDR+SYSTEM_WORD_LENGTH_SIZE
#define SYSTEM_SAMPLE_RATE_SIZE 4

#define SYSTEM_SERIAL_NUMBER_ADDR SYSTEM_SAMPLE_RATE_ADDR+SYSTEM_SAMPLE_RATE_SIZE
#define SYSTEM_SERIAL_NUMBER_SIZE 16

#define SYSTEM_SENSITIVITY_ADDR SYSTEM_SERIAL_NUMBER_ADDR+SYSTEM_SERIAL_NUMBER_SIZE
#define SYSTEM_SENSITIVITY_SIZE 4

#define SYSTEM_CALIBRATION_DATE_ADDR SYSTEM_SENSITIVITY_ADDR+SYSTEM_SENSITIVITY_SIZE
#define SYSTEM_CALIBRATION_DATE_SIZE 6

#define SYSTEM_MANUFACTUER_ID_ADDR SYSTEM_CALIBRATION_DATE_ADDR+SYSTEM_CALIBRATION_DATE_SIZE
#define SYSTEM_MANUFACTUER_ID_SIZE 2

#define SYSTEM_FW_VERSION_ADDR SYSTEM_MANUFACTUER_ID_ADDR+SYSTEM_MANUFACTUER_ID_SIZE
#define SYSTEM_FW_VERSION_SIZE 2

#define INFO2_START_ADDR   INFO1_START_ADDR+INFO1_SIZE
#define INFO2_SIZE 128
#define INFO2_CHECKSUM_ADDR INFO2_START_ADDR+INFO2_SIZE-1

#define SYSTEM_NOTE_ADDR INFO2_START_ADDR
#define SYSTEM_NOTE_SIZE 128


int8_t FIT_EE_Read(uint16_t address,uint8_t *data,uint16_t size);
int8_t FIT_EE_Write(uint16_t address,uint8_t *data,uint16_t size);
bool writeEE(uint16_t addr,uint8_t *data,uint8_t size);
bool writeModelNumber(uint8_t infoID,uint8_t *data,uint8_t size);
void readModelNumber(uint8_t infoID,uint8_t *data);
bool writeVersionLetter(uint8_t infoID,uint8_t *data,uint8_t size);
void readVersionLetter(uint8_t infoID,uint8_t *data);
bool writeSerialNumber(uint8_t infoID,uint8_t *data,uint8_t size);
void readSerialNumber(uint8_t infoID,uint8_t *data);
bool writeSensitivity(uint8_t infoID,uint8_t *data,uint8_t size);
void readSensitivity(uint8_t infoID,uint8_t *data);
bool writeReferenceFrequency(uint8_t infoID,uint8_t *data,uint8_t size);
void readReferenceFrequency(uint8_t infoID,uint8_t *data);
bool writeUnitsCode(uint8_t infoID,uint8_t *data,uint8_t size);
void readUnitsCode(uint8_t infoID,uint8_t *data);
bool writeFrequencyRangeMin(uint8_t infoID,uint8_t *data,uint8_t size);
void readFrequencyRangeMin(uint8_t infoID,uint8_t *data);
bool writeFrequencyRangeMax(uint8_t infoID,uint8_t *data,uint8_t size);
void readFrequencyRangeMax(uint8_t infoID,uint8_t *data);
bool writeChannelAssignment(uint8_t infoID,uint8_t *data,uint8_t size);
void readChannelAssignment(uint8_t infoID,uint8_t *data);
bool writeDigitalInterfaceType(uint8_t *data,uint8_t size);
void readDigitalInterfaceType(uint8_t infoID,uint8_t *data);
bool writeBitClockFrequency(uint8_t *data,uint8_t size);
void readBitClockFrequency(uint8_t infoID,uint8_t *data);
bool writeWordLength(uint8_t *data,uint8_t size);
void readWordLength(uint8_t infoID,uint8_t *data);
bool writeSampleRate(uint8_t *data,uint8_t size);
void readSampleRate(uint8_t infoID,uint8_t *data);
bool writeCalibrationDate(uint8_t *data,uint8_t size);
void readCalibrationDate(uint8_t infoID,uint8_t *data);
bool writeManufacturerID(uint8_t *data,uint8_t size);
void readManufacturerID(uint8_t infoID,uint8_t *data);
bool writeFirmwareVersion(uint8_t *data,uint8_t size);
void readFirmwareVersion(uint8_t infoID,uint8_t *data);
bool writeNotes(uint8_t *data,uint8_t size);
void readNotes(uint8_t infoID,uint8_t *data);
bool writeEnableDebugMsgFlag(uint8_t flag);
uint8_t readEnableDebugMsgFlag();
int8_t writePage(uint8_t blockID,uint8_t *pageBuf,uint8_t numberOfByte,uint8_t pageEESize);
//int8_t getPage(uint8_t page,uint8_t *pageBuf,uint8_t pageEESize);
int8_t getPageFromEEprom(uint8_t page,uint8_t *pageBuf,uint8_t pageEESize);
bool commandWriteOneByteToEE(uint16_t addr,uint8_t *data);
void initEEPROM();
void testEEprom();
#endif /* SRC_FIT_HEADER_FIT_M24C08_EE_H_ */

